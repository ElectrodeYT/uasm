uasm: 1.0
name: DynamoCPU

reg: a:32
reg: b:32
reg: c:32
reg: d:32
reg: e:32
reg: f
g
h



inst: nop, 00000000, 0
inst: li:a:b, a:r, b:8, 000a0001bbbbbbbb, 0 ; Load immideate
inst: lil:a, a:8, 00100001aaaaaaaa, 0 ; Load immideate into link register
inst: lilp:a, a:8, 01000001aaaaaaaa, 0 ; Load immideate into link prime register
inst: swp, 00000010, 0 ; Swap registers
inst: swl:a, a:r, 000a0011, 0 ; Swap register and link register
inst: swlp:a, a:r, 010a0011, 0 ; Swap register and link prime register
inst: lsw, 00100011, 0 ; Swap link and link prime

inst: and, 00000100, 0 ; AND a and b into a
inst: or, 00100100, 0 ; OR a and b into a
inst: nand, 01000100, 0 ; NAND a and b into a
inst: unor, 01100100, 0 ; AND a and ~b into a


inst: invert:a, a:r, 000a0101, 0 ; Invert register logically
inst: add:a, a:r, 000a0110, 0 ; Add B into A
inst: sub:a, a:r, 000a0111, 0 ; Subtract B from A into reg
inst: shl:a, a:r, 000a1000, 0 ; Shift register left
inst: shr:a, a:r, 000a1001, 0 ; Shift register left
inst: in:a, a:r, 000a1010, 0 ; Get input into register
inst: out:a, a:r, 000a1011, 0 ; Set output from register
inst: mdr:a, a:r, 000a1100, 0 ; Get byte in data segment at link register
inst: jmp:a, a:9, a0001101aaaaaaaa, 0 ; Jump
inst: jz:a:b, a:r, b:9, a01a1101bbbbbbbb, 0 ; Jump if register is zero
inst: jnz:a:b, a:r, b:9, a10a1101bbbbbbbb, 0 ; Jump if register is not zero
inst: jov:a, a:9, a1101101aaaaaaaa, 0 ; Jump if last addition overflowed
inst: mrd:a, a:r, 000a1110, 0 ; Move contents in register to data at address link
inst: call:a, a:9, a0101110aaaaaaaa, 0 ; Calls a function
inst: return, 01001110, 0 ; Returns from a function

; Dont know if im going to keep this
inst: sov, 00101111, 0 ; Set the overflow bit
inst: cov, 00001111, 0 ; Clear the overflow bit

inst: jreg:a, a:r, 100a1111, 0 ; Jumps to {overflow, reg}

rule: cpu-is-harvard: 1
rule: default-origin: 0x0